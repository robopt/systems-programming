pub const TARGET_SEGMENT: u32 = 0x00001000;	
pub const TARGET_ADDRESS: u32 = 0x00010000;	
pub const TARGET_STACK: u32 = 0x00010000;	
pub const GDT_SEGMENT: u32 = 0x00000050;
pub const GDT_ADDRESS: u32 = 0x00000500;
pub const GDT_LINEAR: u32 = 0x0008;		
pub const GDT_CODE: u32 = 0x0010;		
pub const GDT_DATA: u32 = 0x0018;		
pub const GDT_STACK: u32 = 0x0020;		
pub const IDT_SEGMENT: u32 = 0x00000250;
pub const IDT_ADDRESS: u32 = 0x00002500;
pub const MMAP_SEGMENT: u32 = 0x000002D0;
pub const MMAP_ADDRESS: u32 = 0x00002D00;
pub const MMAP_EXT_LO: u32 = 0x00;	
pub const MMAP_EXT_HI: u32 = 0x02;	
pub const MMAP_CFG_LO: u32 = 0x04;	
pub const MMAP_CFG_HI: u32 = 0x06;	
pub const MMAP_PROGRAMS: u32 = 0x08;	
pub const MMAP_SECTORS: u32 = 0x0a;	
pub const RMTEXT_SEGMENT: u32 = 0x00000300;
pub const RMTEXT_ADDRESS: u32 = 0x00003000;
pub const CLOCK_FREQUENCY: u32 = 1000;
pub const QUANTUM_DEFAULT: u32 = 10;
pub const NULL: u32 = 0;
pub const N_PROCS: u32 = 25;
pub const N_QUEUES: u32 = 10;
pub const FD_CONSOLE: u32 = 0;
pub const FD_SIO: u32 = 1;
pub const INFO_PID: u32 = 0;
pub const INFO_PPID: u32 = 1;
pub const INFO_STATE: u32 = 2;
pub const INFO_WAKEUP: u32 = 3;
pub const INFO_PRIO: u32 = 4;
pub const INFO_QUANTUM: u32 = 5;
pub const INFO_DEF_QUANTUM: u32 = 6;
pub const SYSINFO_TIME: u32 = 0;
pub const SYSINFO_NUM_PROCS: u32 = 1;
pub const SYSINFO_MAX_PROCS: u32 = 2;
pub const N_PCBS: u32 = (N_PROCS + 1);
pub const STATE_CODE_MASK: u32 = 0x3f;
pub const STATE_FLAG_MASK: u32 = 0xc0;
pub const STATE_FREE: u32 = 0;
pub const STATE_NEW: u32 = 1;
pub const STATE_READY: u32 = 2;
pub const STATE_RUNNING: u32 = 3;
pub const STATE_SLEEPING: u32 = 4;
pub const STATE_BLOCKED: u32 = 5;
pub const N_STATES: u32 = 6;
pub const PRIO_SYSTEM: u32 = 0;
pub const PRIO_USER_HIGH: u32 = 1;
pub const PRIO_USER_STD: u32 = 2;
pub const PRIO_USER_LOW: u32 = 3;
pub const PRIO_DEFAULT: u32 = PRIO_USER_STD;
pub const N_PRIOS: u32 = 4;
pub const PRIO_LAST: u32 = PRIO_USER_LOW;
pub const PID_INIT: u32 = 1;
pub const N_READY: u32 = N_PRIOS;
pub const SIO_TX: u32 = 0x01;
pub const SIO_RX: u32 = 0x02;
pub const SIO_BOTH: u32 = (SIO_TX | SIO_RX);
pub const STACK_LWORDS: u32 = 1024;
pub const N_STACKS: u32 = (N_PROCS);
pub const IDT_PADDR: u32 = 0x2400;
pub const SYS_exit: u32 = 0;
pub const SYS_spawnp: u32 = 1;
pub const SYS_sleep: u32 = 2;
pub const SYS_read: u32 = 3;
pub const SYS_write: u32 = 4;
pub const SYS_get_process_info: u32 = 5;
pub const SYS_get_system_info: u32 = 6;
pub const N_SYSCALLS: u32 = 7;
pub const SYS_bogus: u32 = (N_SYSCALLS+50);
pub const INT_VEC_SYSCALL: u32 = 0x80;
pub const DEFAULT_EFLAGS: u32 = (EFLAGS_MB1 | EFLAGS_IF);
pub const UA4_COM1_IOADDR: u32 = 0x3f8;
pub const UA4_COM2_IOADDR: u32 = 0x2f8;
pub const UA4_COM3_IOADDR: u32 = 0x3e8;
pub const UA4_COM4_IOADDR: u32 = 0x2e8;
pub const UA4_PORT: u32 = UA4_COM1_IOADDR;
pub const UA4_RXD: u32 = (UA4_PORT+0); 	
pub const UA4_RX_DATA: u32 = UA4_RXD;
pub const UA4_TXD: u32 = (UA4_PORT+0); 	
pub const UA4_TX_DATA: u32 = UA4_TXD;
pub const UA4_IER: u32 = (UA4_PORT+1);  	
pub const UA4_INT_ENABLE_REG: u32 = UA4_IER;
pub const UA4_IER_RXHDL_IE: u32 = 0x01;	
pub const UA4_IER_RX_INT_ENABLE: u32 = UA4_IER_RXHDL_IE;
pub const UA4_IER_TXLDL_IE: u32 = 0x02;	
pub const UA4_IER_TX_INT_ENABLE: u32 = UA4_IER_TXLDL_IE;
pub const UA4_IER_LS_IE: u32 = 0x04;	
pub const UA4_IER_LINE_STATUS_INT_ENABLE: u32 = UA4_IER_LS_IE;
pub const UA4_IER_MS_IE: u32 = 0x08;	
pub const UA4_IER_MODEM_STATUS_INT_ENABLE: u32 = UA4_IER_MS_IE;
pub const UA4_EIR: u32 = (UA4_PORT+2);   	
pub const UA4_EVENT_ID: u32 = UA4_EIR;
pub const UA4_EIR_IPF: u32 = 0x01;	
pub const UA4_EIR_INT_PENDING: u32 = UA4_EIR_IPF;
pub const UA4_EIR_IPR0: u32 = 0x02;	
pub const UA4_EIR_IPR1: u32 = 0x04;	
pub const UA4_EIR_PRI: u32 = (UA4_EIR_IPR0|UA4_EIR_IPR1);
pub const UA5_EIR_RXFT: u32 = 0x08;	
pub const UA5_EIR_RX_FIFO_TIMEOUT: u32 = UA5_EIR_RXFT;
pub const UA5_EIR_FEN0: u32 = 0x40;	
pub const UA5_EIR_FIFO_ENABLED_0: u32 = UA5_EIR_FEN0;
pub const UA5_EIR_FEN1: u32 = 0x80;	
pub const UA5_EIR_FIFO_ENABLED_1: u32 = UA5_EIR_FEN1;
pub const UA4_EIR_INT_PRI_MASK: u32 = 0x0f;	
pub const UA4_EIR_NO_INT: u32 = 0x01;	
pub const UA4_EIR_NO_INT_PENDING: u32 = UA4_EIR_NO_INT;
pub const UA4_EIR_LINE_STATUS: u32 = 0x06;	
pub const UA4_EIR_LINE_STATUS_INT_PENDING: u32 = UA4_EIR_LINE_STATUS;
pub const UA4_EIR_RX_HIGH: u32 = 0x04;	
pub const UA4_EIR_RX_INT_PENDING: u32 = UA4_EIR_RX_HIGH;
pub const UA5_EIR_RX_FIFO_TO: u32 = 0x0c;	
pub const UA5_EIR_RX_FIFO_TIMEOUT_INT_PENDING: u32 = UA5_EIR_RX_FIFO_TO;
pub const UA4_EIR_TX_LOW: u32 = 0x02;	
pub const UA4_EIR_TX_INT_PENDING: u32 = UA4_EIR_TX_LOW;
pub const UA4_EIR_MODEM_STATUS: u32 = 0x00;	
pub const UA4_EIR_MODEM_STATUS_INT_PENDING: u32 = UA4_EIR_MODEM_STATUS;
pub const UA4_FCR: u32 = (UA4_PORT+2);   	
pub const UA4_FIFO_CTL: u32 = UA4_FCR;
pub const UA5_FCR_FIFO_RESET: u32 = 0x00;	
pub const UA5_FCR_FIFO_EN: u32 = 0x01;	
pub const UA5_FCR_FIFO_ENABLED: u32 = UA5_FCR_FIFO_EN;
pub const UA5_FCR_RXSR: u32 = 0x02;	
pub const UA5_FCR_RX_SOFT_RESET: u32 = UA5_FCR_RXSR; 
pub const UA5_FCR_TXSR: u32 = 0x04;	
pub const UA5_FCR_TX_SOFT_RESET: u32 = UA5_FCR_TXSR;
pub const UA5_FCR_TXFTH0: u32 = 0x10;	
pub const UA5_FCR_TXFTH1: u32 = 0x20;	
pub const UA5_FCR_TXFTH: u32 = (UA5_FCR_TXFTH1|UA5_FCR_TXFTH0);
pub const UA5_FCR_RXFTH0: u32 = 0x40;	
pub const UA5_FCR_RXFTH1: u32 = 0x80;	
pub const UA5_FCR_RXFTH: u32 = (UA5_FCR_RXFTH1|UA5_FCR_RXFTH0);
pub const UA5_FCR_TX_FIFO_1: u32 = 0x00;	
pub const UA5_FCR_TX_FIFO_1_CHAR: u32 = UA5_FCR_TX_FIFO_1;
pub const UA5_FCR_TX_FIFO_3: u32 = 0x10;	
pub const UA5_FCR_TX_FIFO_3_CHAR: u32 = UA5_FCR_TX_FIFO_3;
pub const UA5_FCR_TX_FIFO_9: u32 = 0x20;	
pub const UA5_FCR_TX_FIFO_9_CHAR: u32 = UA5_FCR_TX_FIFO_9;
pub const UA5_FCR_TX_FIFO_13: u32 = 0x30;	
pub const UA5_FCR_TX_FIFO_13_CHAR: u32 = UA5_FCR_TX_FIFO_13;
pub const UA5_FCR_RX_FIFO_1: u32 = 0x00;	
pub const UA5_FCR_RX_FIFO_1_CHAR: u32 = UA5_FCR_RX_FIFO_1;
pub const UA5_FCR_RX_FIFO_4: u32 = 0x40;	
pub const UA5_FCR_RX_FIFO_4_CHAR: u32 = UA5_FCR_RX_FIFO_4;
pub const UA5_FCR_RX_FIFO_8: u32 = 0x80;	
pub const UA5_FCR_RX_FIFO_8_CHAR: u32 = UA5_FCR_RX_FIFO_8;
pub const UA5_FCR_RX_FIFO_14: u32 = 0xc0;	
pub const UA5_FCR_RX_FIFO_14_CHAR: u32 = UA5_FCR_RX_FIFO_14;
pub const UA4_LCR: u32 = (UA4_PORT+3);   	
pub const UA4_LINE_CTL: u32 = UA4_LCR;
pub const UA4_LCR_WLS0: u32 = 0x01;	
pub const UA4_LCR_WLS1: u32 = 0x02;	
pub const UA4_LCR_WLS: u32 = (UA4_LCR_WLS0|UA4_LCR_WLS1);
pub const UA4_LCR_STB: u32 = 0x04;	
pub const UA4_LCR_STOP_BITS: u32 = UA4_LCR_STB;
pub const UA4_LCR_PEN: u32 = 0x08; 	
pub const UA4_LCR_PARITY_ENABLE: u32 = UA4_LCR_PEN;
pub const UA4_LCR_EPS: u32 = 0x10;	
pub const UA4_LCR_STKP: u32 = 0x20;	
pub const UA4_LCR_SBRK: u32 = 0x40;	
pub const UA4_LCR_SET_BREAK: u32 = UA4_LCR_SBRK;
pub const UA4_LCR_BKSE: u32 = 0x80;	
pub const UA4_LCR_BANK_SELECT_ENABLE: u32 = UA4_LCR_BKSE;
pub const UA4_LCR_BITS_5: u32 = 0x00;	
pub const UA4_LCR_BITS_6: u32 = 0x01;	
pub const UA4_LCR_BITS_7: u32 = 0x02;	
pub const UA4_LCR_BITS_8: u32 = 0x03;	
pub const UA4_LCR_1_STOP_BIT: u32 = 0x00;
pub const UA4_LCR_2_STOP_BIT: u32 = 0x01;
pub const UA4_LCR_NO_PARITY: u32 = 0x00;	
pub const UA4_LCR_ODD_PARITY: u32 = UA4_LCR_PEN;
pub const UA4_LCR_EVEN_PARITY: u32 = (UA4_LCR_PEN|UA4_LCR_EPS);
pub const UA4_LCR_PARITY_LOGIC_1: u32 = (UA4_LCR_PEN|UA4_LCR_STKP);
pub const UA4_LCR_PARITY_LOGIC_0: u32 = (UA4_LCR_PEN|UA4_LCR_EPS|UA4_LCR_STKP);
pub const UA4_BSR: u32 = (UA4_PORT+3);   	
pub const UA4_BANK_SELECT: u32 = UA4_BSR;
pub const UA4_BSR_BANK2: u32 = 0xd0;	
pub const UA4_BSR_BANK3: u32 = 0xd4;	
pub const UA4_LCR_BANK0: u32 = 0x00;	
pub const UA4_LCR_BANK1: u32 = 0x80;	
pub const UA4_MCR: u32 = (UA4_PORT+4);   	
pub const UA4_MODEM_CTL: u32 = UA4_MCR;
pub const UA4_MCR_DTR: u32 = 0x01;	
pub const UA4_MCR_DATA_TERMINAL_READY: u32 = UA4_MCR_DTR;
pub const UA4_MCR_RTS: u32 = 0x02;	
pub const UA4_MCR_READY_TO_SEND: u32 = UA4_MCR_RTS;
pub const UA4_MCR_RILP: u32 = 0x04;	
pub const UA4_MCR_LOOPBACK_INT_REQ: u32 = UA4_MCR_RILP;
pub const UA4_MCR_ISEN: u32 = 0x08;	
pub const UA4_MCR_INT_SIGNAL_ENABLE: u32 = UA4_MCR_ISEN;
pub const UA4_MCR_DCDLP: u32 = 0x08;	
pub const UA4_MCR_LOOPBACK_DCD: u32 = UA4_MCR_DCDLP;
pub const UA4_MCR_LOOP: u32 = 0x10;	
pub const UA4_MCR_LOOPBACK_ENABLE: u32 = UA4_MCR_LOOP;
pub const UA4_LSR: u32 = (UA4_PORT+5);   	
pub const UA4_LINE_STATUS: u32 = UA4_LSR;
pub const UA4_LSR_RXDA: u32 = 0x01;	
pub const UA4_LSR_RX_DATA_AVAILABLE: u32 = UA4_LSR_RXDA;
pub const UA4_LSR_OE: u32 = 0x02;	
pub const UA4_LSR_OVERRUN_ERROR: u32 = UA4_LSR_OE;
pub const UA4_LSR_PE: u32 = 0x04;	
pub const UA4_LSR_PARITY_ERROR: u32 = UA4_LSR_PE;
pub const UA4_LSR_FE: u32 = 0x08;	
pub const UA4_LSR_FRAMING_ERROR: u32 = UA4_LSR_FE;
pub const UA4_LSR_BRK: u32 = 0x10;	
pub const UA4_LSR_BREAK_DETECTED: u32 = UA4_LSR_BRK;
pub const UA4_LSR_TXRDY: u32 = 0x20;	
pub const UA4_LSR_TX_READY: u32 = UA4_LSR_TXRDY;
pub const UA4_LSR_TXEMP: u32 = 0x40;	
pub const UA4_LSR_TX_EMPTY: u32 = UA4_LSR_TXEMP;
pub const UA4_LSR_ER_INF: u32 = 0x80;	
pub const UA4_LSR_RX_FIFO_ERROR: u32 = UA4_LSR_ER_INF;
pub const UA4_MSR: u32 = (UA4_PORT+6);   	
pub const UA4_MODEM_STATUS: u32 = UA4_MSR;
pub const UA4_MSR_DCTS: u32 = 0x01;	
pub const UA4_MSR_DELTA_CLEAR_TO_SEND: u32 = UA4_MSR_DCTS;
pub const UA4_MSR_DDSR: u32 = 0x02;	
pub const UA4_MSR_DELTA_DATA_SET_READY: u32 = UA4_MSR_DDSR;
pub const UA4_MSR_TERI: u32 = 0x04;	
pub const UA4_MSR_TRAILING_EDGE_RING: u32 = UA4_MSR_TERI;
pub const UA4_MSR_DDCD: u32 = 0x08;	
pub const UA4_MSR_DELTA_DATA_CARRIER_DETECT: u32 = UA4_MSR_DDCD;
pub const UA4_MSR_CTS: u32 = 0x10;	
pub const UA4_MSR_CLEAR_TO_SEND: u32 = UA4_MSR_CTS;
pub const UA4_MSR_DSR: u32 = 0x20;	
pub const UA4_MSR_DATA_SET_READY: u32 = UA4_MSR_DSR;
pub const UA4_MSR_RI: u32 = 0x40;	
pub const UA4_MSR_RING_INDICATE: u32 = UA4_MSR_RI;
pub const UA4_MSR_DCD: u32 = 0x80;	
pub const UA4_MSR_DATA_CARRIER_DETECT: u32 = UA4_MSR_DCD;
pub const UA4_UA5_SCR: u32 = (UA4_PORT+7);	
pub const UA4_UA5_SCRATCH: u32 = UA4_UA5_SCR;
pub const UA4_LBGD_L: u32 = (UA4_PORT+0x00);	
pub const UA4_LBGD_H: u32 = (UA4_PORT+0x01);	
pub const BAUD_50: u32 = 2304;
pub const BAUD_75: u32 = 1536;
pub const BAUD_110: u32 = 1047;
pub const BAUD_150: u32 = 768;
pub const BAUD_300: u32 = 384;
pub const BAUD_600: u32 = 192;
pub const BAUD_1200: u32 = 96;
pub const BAUD_1800: u32 = 64;
pub const BAUD_2000: u32 = 58;
pub const BAUD_2400: u32 = 48;
pub const BAUD_3600: u32 = 32;
pub const BAUD_4800: u32 = 24;
pub const BAUD_7200: u32 = 16;
pub const BAUD_9600: u32 = 12;
pub const BAUD_14400: u32 = 8;
pub const BAUD_19200: u32 = 6;
pub const BAUD_28800: u32 = 4;
pub const BAUD_38400: u32 = 3;
pub const BAUD_57600: u32 = 2;
pub const BAUD_115200: u32 = 1;
pub const DELAY_LONG: u32 = 100000000;
pub const DELAY_STD: u32 = 2500000;
pub const DELAY_ALT: u32 = 4500000;
pub const VIDEO_BASE_ADDR: u32 = 0xB8000;
pub const SEG_PRESENT: u32 = 0x80;
pub const SEG_PL_0: u32 = 0x00;
pub const SEG_PL_1: u32 = 0x20;
pub const SEG_PL_2: u32 = 0x40;
pub const SEG_PL_3: u32 = 0x50;
pub const SEG_SYSTEM: u32 = 0x00;
pub const SEG_NON_SYSTEM: u32 = 0x10;
pub const SEG_32BIT: u32 = 0x04;
pub const DESC_IGATE: u32 = 0x06;
pub const N_EXCEPTIONS: u32 = 256;
pub const EFLAGS_RSVD: u32 = 0xffc00000;	
pub const EFLAGS_MB0: u32 = 0x00008020;	
pub const EFLAGS_MB1: u32 = 0x00000002;	
pub const EFLAGS_ID: u32 = 0x00200000;
pub const EFLAGS_VIP: u32 = 0x00100000;
pub const EFLAGS_VIF: u32 = 0x00080000;
pub const EFLAGS_AC: u32 = 0x00040000;
pub const EFLAGS_VM: u32 = 0x00020000;
pub const EFLAGS_RF: u32 = 0x00010000;
pub const EFLAGS_NT: u32 = 0x00004000;
pub const EFLAGS_IOPL: u32 = 0x00003000;
pub const EFLAGS_OF: u32 = 0x00000800;
pub const EFLAGS_DF: u32 = 0x00000400;
pub const EFLAGS_IF: u32 = 0x00000200;
pub const EFLAGS_TF: u32 = 0x00000100;
pub const EFLAGS_SF: u32 = 0x00000080;
pub const EFLAGS_ZF: u32 = 0x00000040;
pub const EFLAGS_AF: u32 = 0x00000010;
pub const EFLAGS_PF: u32 = 0x00000004;
pub const EFLAGS_CF: u32 = 0x00000001;
pub const CR0_RSVD: u32 = 0x1ffaffc0;
pub const CR0_PG: u32 = 0x80000000;
pub const CR0_CD: u32 = 0x40000000;
pub const CR0_NW: u32 = 0x20000000;
pub const CR0_AM: u32 = 0x00040000;
pub const CR0_WP: u32 = 0x00010000;
pub const CR0_NE: u32 = 0x00000020;
pub const CR0_ET: u32 = 0x00000010;
pub const CR0_TS: u32 = 0x00000008;
pub const CR0_EM: u32 = 0x00000004;
pub const CR0_MP: u32 = 0x00000002;
pub const CR0_PE: u32 = 0x00000001;
pub const CR1_RSVD: u32 = 0xffffffff;
pub const CR2_RSVD: u32 = 0x00000000;
pub const CR2_PF_LIN_ADDR: u32 = 0xffffffff;
pub const CR3_RSVD: u32 = 0x00000fe7;
pub const CR3_PD_BASE: u32 = 0xfffff000;
pub const CR3_PCD: u32 = 0x00000010;
pub const CR3_PWT: u32 = 0x00000008;
pub const CR4_RSVD: u32 = 0xfffff800;
pub const CR4_OSXMMEXCPT: u32 = 0x00000400;
pub const CR4_OSFXSR: u32 = 0x00000200;
pub const CR4_PCE: u32 = 0x00000100;
pub const CR4_PGE: u32 = 0x00000080;
pub const CR4_MCE: u32 = 0x00000040;
pub const CR4_PAE: u32 = 0x00000020;
pub const CR4_PSE: u32 = 0x00000010;
pub const CR4_DE: u32 = 0x00000008;
pub const CR4_TSD: u32 = 0x00000004;
pub const CR4_PVI: u32 = 0x00000002;
pub const CR4_VME: u32 = 0x00000001;
pub const SEG_SEL_IX: u32 = 0xfff8;
pub const SEG_SEL_TI: u32 = 0x0004;
pub const SEG_SEL_RPL: u32 = 0x0003;
pub const SEG_ACCESS_TYPE_MASK: u32 = 0x0f;
pub const SEG_ACCESS_S_BIT: u32 = 0x10;
pub const SEG_ACCESS_DPL_MASK: u32 = 0x60;
pub const SEG_ACCESS_P_BIT: u32 = 0x80;
pub const SEG_SIZE_LIM_19_16: u32 = 0x0f;
pub const SEG_SIZE_AVL_BIT: u32 = 0x10;
pub const SEG_SIZE_D_B_BIT: u32 = 0x40;
pub const SEG_SIZE_G_BIT: u32 = 0x80;
pub const SEG_SYS_16BIT_TSS_AVAIL: u32 = 0x1;
pub const SEG_SYS_LDT: u32 = 0x2;
pub const SEG_SYS_16BIT_TSS_BUSY: u32 = 0x3;
pub const SEG_SYS_16BIT_CALL_GATE: u32 = 0x4;
pub const SEG_SYS_TASK_GATE: u32 = 0x5;
pub const SEG_SYS_16BIT_INT_GATE: u32 = 0x6;
pub const SEG_SYS_16BIT_TRAP_GATE: u32 = 0x7;
pub const SEG_SYS_32BIT_TSS_AVAIL: u32 = 0x9;
pub const SEG_SYS_32BIT_TSS_BUSY: u32 = 0xb;
pub const SEG_SYS_32BIT_CALL_GATE: u32 = 0xc;
pub const SEG_SYS_32BIT_INT_GATE: u32 = 0xe;
pub const SEG_SYS_32BIT_TRAP_GATE: u32 = 0xf;
pub const IDT_PRESENT: u32 = 0x8000;
pub const IDT_DPL_MASK: u32 = 0x6000;
pub const IDT_GATE_TYPE: u32 = 0x0f00;
pub const INT_VEC_DIVIDE_ERROR: u32 = 0x00;
pub const INT_VEC_DEBUG_EXCEPTION: u32 = 0x01;
pub const INT_VEC_NMI_INTERRUPT: u32 = 0x02;
pub const INT_VEC_BREAKPOINT: u32 = 0x03;
pub const INT_VEC_INTO_DETECTED_OVERFLOW: u32 = 0x04;
pub const INT_VEC_BOUND_RANGE_EXCEEDED: u32 = 0x05;
pub const INT_VEC_INVALID_OPCODE: u32 = 0x06;
pub const INT_VEC_DEVICE_NOT_AVAILABLE: u32 = 0x07;
pub const INT_VEC_DOUBLE_EXCEPTION: u32 = 0x08;
pub const INT_VEC_COPROCESSOR_OVERRUN: u32 = 0x09;
pub const INT_VEC_INVALID_TSS: u32 = 0x0a;
pub const INT_VEC_SEGMENT_NOT_PRESENT: u32 = 0x0b;
pub const INT_VEC_STACK_FAULT: u32 = 0x0c;
pub const INT_VEC_GENERAL_PROTECTION: u32 = 0x0d;
pub const INT_VEC_PAGE_FAULT: u32 = 0x0e;
pub const INT_VEC_COPROCESSOR_ERROR: u32 = 0x10;
pub const INT_VEC_ALIGNMENT_CHECK: u32 = 0x11;
pub const INT_VEC_MACHINE_CHECK: u32 = 0x12;
pub const INT_VEC_SIMD_FP_EXCEPTION: u32 = 0x13;
pub const INT_VEC_TIMER: u32 = 0x20;
pub const INT_VEC_KEYBOARD: u32 = 0x21;
pub const INT_VEC_SERIAL_PORT_2: u32 = 0x23;
pub const INT_VEC_SERIAL_PORT_1: u32 = 0x24;
pub const INT_VEC_PARALLEL_PORT: u32 = 0x25;
pub const INT_VEC_FLOPPY_DISK: u32 = 0x26;
pub const INT_VEC_MYSTERY: u32 = 0x27;
pub const INT_VEC_MOUSE: u32 = 0x2c;
pub const TIMER_DEFAULT_TICKS_PER_SECOND: u32 = 18;	
pub const TIMER_DEFAULT_MS_PER_TICK: u32 = (1000/TIMER_DEFAULT_TICKS_PER_SECOND);
pub const TIMER_FREQUENCY: u32 = 1193182;	
pub const TIMER_BASE_PORT: u32 = 0x40;	
pub const TIMER_0_PORT: u32 = ( TIMER_BASE_PORT );
pub const TIMER_1_PORT: u32 = ( TIMER_BASE_PORT + 1 );
pub const TIMER_2_PORT: u32 = ( TIMER_BASE_PORT + 2 );
pub const TIMER_CONTROL_PORT: u32 = ( TIMER_BASE_PORT + 3 );
pub const TIMER_USE_DECIMAL: u32 = 0x01;	
pub const TIMER_USE_BCD: u32 = 0x01;	
pub const TIMER_MODE_0: u32 = 0x00;	
pub const TIMER_MODE_1: u32 = 0x02;	
pub const TIMER_MODE_2: u32 = 0x04;	
pub const TIMER_MODE_3: u32 = 0x06;	
pub const TIMER_MODE_4: u32 = 0x08;	
pub const TIMER_MODE_5: u32 = 0x0a;	
pub const TIMER_0_SELECT: u32 = 0x00;	
pub const TIMER_0_LOAD: u32 = 0x30;	
pub const TIMER_0_NDIV: u32 = TIMER_MODE_2;	
pub const TIMER_0_SQUARE: u32 = TIMER_MODE_3;	
pub const TIMER_0_ENDSIGNAL: u32 = 0x00;	
pub const TIMER_1_SELECT: u32 = 0x40;	
pub const TIMER_1_READ: u32 = 0x30;	
pub const TIMER_1_RATE: u32 = 0x06;	
pub const TIMER_2_SELECT: u32 = 0x80;	
pub const TIMER_2_READ: u32 = 0x30;	
pub const TIMER_2_RATE: u32 = 0x06;	
pub const TIMER_READBACK: u32 = 0xc0;	
pub const TIMER_RB_NOT_COUNT: u32 = 0x20;	
pub const TIMER_RB_NOT_STATUS: u32 = 0x10;	
pub const TIMER_RB_CHAN_2: u32 = 0x08;	
pub const TIMER_RB_CHAN_1: u32 = 0x04;	
pub const TIMER_RB_CHAN_0: u32 = 0x02;	
pub const TIMER_RB_ACCESS_MASK: u32 = 0x30;	
pub const TIMER_RB_OP_MASK: u32 = 0x0e;	
pub const TIMER_RB_BCD_MASK: u32 = 0x01;	
pub const PIC_NEEDICW4: u32 = 0x01;		
pub const PIC_ICW1BASE: u32 = 0x10;		
pub const PIC_LTIM: u32 = 0x08;		
pub const PIC_86MODE: u32 = 0x01;		
pub const PIC_AUTOEOI: u32 = 0x02;		
pub const PIC_SLAVEBUF: u32 = 0x08;		
pub const PIC_MASTERBUF: u32 = 0x0C;		
pub const PIC_SPFMODE: u32 = 0x10;		
pub const PIC_READISR: u32 = 0x0B;		
pub const PIC_READIRR: u32 = 0x0A;		
pub const PIC_EOI: u32 = 0x20;		
pub const PIC_SEOI: u32 = 0x60;		
pub const PIC_SEOI_LVL7: u32 = (PIC_SEOI | 0x7);	
pub const NPIC: u32 = 2;		
pub const PIC_MASTER_CMD_PORT: u32 = 0x20;	
pub const PIC_MASTER_IMR_PORT: u32 = 0x21;	
pub const PIC_SLAVE_CMD_PORT: u32 = 0xA0;	
pub const PIC_SLAVE_IMR_PORT: u32 = 0xA1;	
pub const PIC_MASTER_SLAVE_LINE: u32 = 0x04;	
pub const PIC_SLAVE_ID: u32 = 0x02;	
pub const PIC_BUFFERED: u32 = 0;	
