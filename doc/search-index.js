var searchIndex = {};
searchIndex['main'] = {"items":[[0,"","main","",null,null],[0,"rust","","",null,null],[0,"data","main::rust","",null,null],[0,"container","main::rust::data","",null,null],[0,"slice","main::rust::data::container","",null,null],[8,"SliceExt2","main::rust::data::container::slice","",null,null],[11,"offset_unchecked","","",0,null],[11,"trunc_unchecked","","",0,null],[11,"slice_unchecked","","",0,null],[11,"offset_unchecked_mut","","",0,null],[11,"trunc_unchecked_mut","","",0,null],[11,"slice_unchecked_mut","","",0,null],[11,"write_unchecked","","",0,{"inputs":[{"name":"sliceext2"},{"name":"usize"},{"name":"item"}],"output":null}],[11,"swap_unchecked","","",0,{"inputs":[{"name":"sliceext2"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"copy_unchecked","","",0,null],[0,"generic","main::rust::data::container","",null,null],[0,"dev","main::rust::data::container::generic","",null,null],[0,"fmt","main::rust::data::container::generic::dev","Utilities for formatting and printing strings",null,null],[6,"Result","main::rust::data::container::generic::dev::fmt","",null,null],[3,"Error","","The error type which is returned from formatting a message into a stream.",null,null],[8,"Write","","A collection of methods that are required to format a message into a stream.",null,null],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write\nsucceeded.",1,{"inputs":[{"name":"write"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","Writes a `char` into this writer, returning whether the write succeeded.",1,{"inputs":[{"name":"write"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","Glue for usage of the `write!` macro with implementers of this trait.",1,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[3,"Formatter","","A struct to represent both where to emit formatting strings to and how they\nshould be formatted. A mutable version of this is passed to all formatting\ntraits.",null,null],[3,"Arguments","","This structure represents a safely precompiled version of a format string\nand its arguments. This cannot be generated at runtime because it cannot\nsafely be done so, so no constructors are given and the fields are private\nto prevent modification.",null,null],[8,"Debug","","Format trait for the `:?` format. Useful for debugging, all types\nshould implement this.",null,null],[10,"fmt","","Formats the value using the given formatter.",2,{"inputs":[{"name":"debug"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Display","","When a value can be semantically expressed as a String, this trait may be\nused. It corresponds to the default format, `{}`.",null,null],[10,"fmt","","Formats the value using the given formatter.",3,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Octal","","Format trait for the `o` character",null,null],[10,"fmt","","Formats the value using the given formatter.",4,{"inputs":[{"name":"octal"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Binary","","Format trait for the `b` character",null,null],[10,"fmt","","Formats the value using the given formatter.",5,{"inputs":[{"name":"binary"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"LowerHex","","Format trait for the `x` character",null,null],[10,"fmt","","Formats the value using the given formatter.",6,{"inputs":[{"name":"lowerhex"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"UpperHex","","Format trait for the `X` character",null,null],[10,"fmt","","Formats the value using the given formatter.",7,{"inputs":[{"name":"upperhex"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Pointer","","Format trait for the `p` character",null,null],[10,"fmt","","Formats the value using the given formatter.",8,{"inputs":[{"name":"pointer"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"LowerExp","","Format trait for the `e` character",null,null],[10,"fmt","","Formats the value using the given formatter.",9,{"inputs":[{"name":"lowerexp"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"UpperExp","","Format trait for the `E` character",null,null],[10,"fmt","","Formats the value using the given formatter.",10,{"inputs":[{"name":"upperexp"},{"name":"formatter"}],"output":{"name":"result"}}],[5,"write","","The `write` function takes an output stream, a precompiled format string,\nand a list of arguments. The arguments will be formatted according to the\nspecified format string into the output stream provided.",null,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[3,"DebugSet","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugMap","","A struct to help with `fmt::Debug` implementations.",null,null],[5,"radix","","Constructs a radix formatter in the range of `2..36`.",null,{"inputs":[{"name":"t"},{"name":"u8"}],"output":{"name":"radixfmt"}}],[3,"Radix","","A radix with in the range of `2..36`.",null,null],[3,"DebugStruct","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"RadixFmt","","A helper type for formatting radixes.",null,null],[3,"DebugTuple","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugList","","A struct to help with `fmt::Debug` implementations.",null,null],[8,"ContainerImpl","main::rust::data::container::generic::dev","Implementation required to have a basic container.",null,null],[10,"impl_construct","","Constructs the container from an existing array of data. Should not\ncheck if `len <= data.len()`, should not drop the contents of\n`data[len..]`, and should preferably not copy the data or allocate/use\nmore memory than what is provided.",11,null],[10,"impl_len","","Returns the current number of elements in the container in O(1) time.",11,{"inputs":[{"name":"containerimpl"}],"output":{"name":"usize"}}],[10,"impl_capacity","","Returns the maximum number of elements that the container can hold in O(1)\ntime.",11,{"inputs":[{"name":"containerimpl"}],"output":{"name":"usize"}}],[10,"impl_is_empty","","Returns the same value as `len() > 0`, but should be faster if the\nimplementation allows it.",11,{"inputs":[{"name":"containerimpl"}],"output":{"name":"bool"}}],[10,"impl_is_full","","Returns the same value as `len() == capacity()`, but should be faster\nif the implementation allows it.",11,{"inputs":[{"name":"containerimpl"}],"output":{"name":"bool"}}],[10,"impl_peek","","Returns a mutable reference to the next element in the container which\nwould be removed by a call to `remove()`. Should not check if the\ncontainer is empty.",11,{"inputs":[{"name":"containerimpl"}],"output":{"name":"t"}}],[10,"impl_remove","","Marks an element as removed from the container and returns a pointer to\nits current location in memory. Should not check if the container is empty\nor modify the value at the pointer.",11,{"inputs":[{"name":"containerimpl"}],"output":{"name":"t"}}],[10,"impl_forget","","Marks multiple elements as removed from the container, running a function\non them, and returning the number of elements removed. Should do the same\nas removing elements from the container until the container is empty, and\nshould be faster if the implementation allows it. Should not modify the\noriginal locations of the removed elements besides passing them into a\nfunction.",11,{"inputs":[{"name":"containerimpl"},{"name":"usize"},{"name":"f"}],"output":{"name":"usize"}}],[10,"impl_add","","Adds an element to the container. Should not check if the container is\nfull.",11,{"inputs":[{"name":"containerimpl"},{"name":"t"}],"output":null}],[10,"impl_extend","","Adds multiple elements to the container, returning the number of elements\nadded. Should do the same as adding copies of the elements from the array\ninto the container until the container is full, and should be faster if\nthe implementation allows it. Should copy the elements from the array\nwithout modifying the original array.",11,null],[10,"impl_clear","","Marks a container as empty after running a function on all of its\nelements. Should not modify the container's data besides passing them into\nthe function.",11,{"inputs":[{"name":"containerimpl"},{"name":"f"}],"output":null}],[10,"impl_copy","","Copies the container's data to a new buffer and runs a given function on\nthe original buffer. Should not check if `self.len() <= data.len()`\nand should not modify the data besides passing them into the function.\nShould preferably make the data contiguous after the copy, if possible.\nThe buffers will not overlap.",11,null],[8,"Container","main::rust::data::container::generic","Generic container; automatically extends ContainerImpl.",null,null],[11,"from_full","","Constructs a container an existing array of data.",12,null],[11,"from_existing","","Constructs a container from an existing array of data.",12,null],[11,"from_empty","","Constructs a container from an empty array of data.",12,null],[11,"from_full_ptr","","Constructs a container from a pointer to an existing array of data.",12,null],[11,"from_existing_ptr","","Constructs a container from a pointer to an existing array of data.",12,null],[11,"from_empty_ptr","","Constructs a container from a pointer to an uninitialised array.",12,null],[11,"len","","Returns the current number of elements in the container in O(1) time.",12,{"inputs":[{"name":"container"}],"output":{"name":"usize"}}],[11,"capacity","","Returns the maximum number of elements that the container can hold in O(1)\ntime.",12,{"inputs":[{"name":"container"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns the same value as `len() > 0`, but may be faster if the\nimplementation allows it.",12,{"inputs":[{"name":"container"}],"output":{"name":"bool"}}],[11,"is_full","","Returns the same value as `len() == capacity()`, but may be faster\nif the implementation allows it.",12,{"inputs":[{"name":"container"}],"output":{"name":"bool"}}],[11,"peek_mut","","Returns a mutable reference to the next element in the container which\nwould be removed by a call to `remove()`.",12,{"inputs":[{"name":"container"}],"output":{"name":"option"}}],[11,"peek_mut_or_panic","","Returns a mutable reference to the next element in the container which\nwould be removed by a call to `remove()`.",12,{"inputs":[{"name":"container"},{"name":"str"}],"output":{"name":"t"}}],[11,"peek","","Returns an immutable reference to the next element in the container which\nwould be removed by a call to `remove()`.",12,{"inputs":[{"name":"container"}],"output":{"name":"option"}}],[11,"peek_or_panic","","Returns an immutable reference to the next element in the container which\nwould be removed by a call to `remove()`.",12,{"inputs":[{"name":"container"},{"name":"str"}],"output":{"name":"t"}}],[11,"remove","","Removes a value from the container and returns the value, or `None` if the\ncontainer is empty.",12,{"inputs":[{"name":"container"}],"output":{"name":"option"}}],[11,"remove_or_panic","","Removes a value from the container and returns the value.",12,{"inputs":[{"name":"container"},{"name":"str"}],"output":{"name":"t"}}],[11,"remove_and_zero","","Removes a value from the container and returns the value, or `None` if the\ncontainer is empty. Zeroes out the value's original location in memory.",12,{"inputs":[{"name":"container"}],"output":{"name":"option"}}],[11,"remove_and_zero_or_panic","","Removes a value from the container and returns the value. Zeroes out the\nvalue's original location in memory.",12,{"inputs":[{"name":"container"},{"name":"str"}],"output":{"name":"t"}}],[11,"forget","","Removes multiple values from the container and returns how many values\nwere removed.",12,{"inputs":[{"name":"container"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"forget_and_zero","","Removes multiple values from the container and returns how many values\nwere removed. Zeroes out the values' original locations in memory.",12,{"inputs":[{"name":"container"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"add_or_panic","","Adds an element to the container.",12,{"inputs":[{"name":"container"},{"name":"t"},{"name":"str"}],"output":null}],[11,"extend","","Adds multiple elements to the container and returns how many values were\nadded. May be faster than multiple adds if the implementation allows it.",12,null],[11,"extend_or_panic","","Adds multiple elements to the container. May be faster than multiple adds\nif the implementation allows it.",12,null],[11,"clear","","Drops all of the elements in the container.",12,{"inputs":[{"name":"container"}],"output":null}],[11,"clear_and_zero","","Drops all of the elements in the container. Zeroes out the container's\nbuffer.",12,{"inputs":[{"name":"container"}],"output":null}],[11,"move_data","","Copies the container's data to a new pointer. Guarantees that the data\nwill be contiguous after the copy.",12,null],[11,"move_data_and_zero","","Copies the container's data to a new pointer. Guarantees that the data\nwill be contiguous after the copy.",12,null],[0,"vec","main::rust::data::container","",null,null],[3,"Vec","main::rust::data::container::vec","A fixed-size, FILO/LIFO array (stack). Uses x86 convention of inserting to\nthe positive side of the array first.",null,null],[11,"write_char","main::rust::data::container::vec::dev::fmt","Writes a `char` into this writer, returning whether the write succeeded.",1,{"inputs":[{"name":"write"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","Glue for usage of the `write!` macro with implementers of this trait.",1,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"impl_construct","main::rust::data::container::vec","",13,null],[11,"impl_len","","",13,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"impl_capacity","","",13,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"impl_is_empty","","",13,{"inputs":[{"name":"vec"}],"output":{"name":"bool"}}],[11,"impl_is_full","","",13,{"inputs":[{"name":"vec"}],"output":{"name":"bool"}}],[11,"impl_add","","",13,{"inputs":[{"name":"vec"},{"name":"t"}],"output":null}],[11,"impl_extend","","",13,null],[11,"impl_remove","","",13,{"inputs":[{"name":"vec"}],"output":{"name":"t"}}],[11,"impl_forget","","",13,{"inputs":[{"name":"vec"},{"name":"usize"},{"name":"f"}],"output":{"name":"usize"}}],[11,"impl_peek","","",13,{"inputs":[{"name":"vec"}],"output":{"name":"t"}}],[11,"impl_clear","","",13,{"inputs":[{"name":"vec"},{"name":"f"}],"output":null}],[11,"impl_copy","","",13,null],[11,"fmt","","",13,{"inputs":[{"name":"vec"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"prio_queue","main::rust::data::container","",null,null],[3,"PrioQueue","main::rust::data::container::prio_queue","A fixed-size, greatest-priority-first queue.",null,null],[5,"prio_min","","Compares and returns the minimum of two values, by priority.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"prio_max","","Compares and returns the maximum of two values, by priority.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"write_char","main::rust::data::container::prio_queue::dev::fmt","Writes a `char` into this writer, returning whether the write succeeded.",1,{"inputs":[{"name":"write"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","Glue for usage of the `write!` macro with implementers of this trait.",1,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[8,"Priority","main::rust::data::container::prio_queue","Trait for determining priority.",null,null],[16,"Prio","","",14,null],[10,"priority","","",14,{"inputs":[{"name":"priority"}],"output":{"name":"prio"}}],[11,"cmp_prio","","",14,{"inputs":[{"name":"priority"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"lt_prio","","",14,{"inputs":[{"name":"priority"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt_prio","","",14,{"inputs":[{"name":"priority"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le_prio","","",14,{"inputs":[{"name":"priority"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge_prio","","",14,{"inputs":[{"name":"priority"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq_prio","","",14,{"inputs":[{"name":"priority"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ne_prio","","",14,{"inputs":[{"name":"priority"},{"name":"self"}],"output":{"name":"bool"}}],[6,"Prio","","",null,null],[6,"Prio","","",null,null],[6,"Prio","","",null,null],[6,"Prio","","",null,null],[6,"Prio","","",null,null],[6,"Prio","","",null,null],[6,"Prio","","",null,null],[6,"Prio","","",null,null],[6,"Prio","","",null,null],[6,"Prio","","",null,null],[11,"impl_construct","","",15,null],[11,"impl_len","","",15,{"inputs":[{"name":"prioqueue"}],"output":{"name":"usize"}}],[11,"impl_capacity","","",15,{"inputs":[{"name":"prioqueue"}],"output":{"name":"usize"}}],[11,"impl_is_empty","","",15,{"inputs":[{"name":"prioqueue"}],"output":{"name":"bool"}}],[11,"impl_is_full","","",15,{"inputs":[{"name":"prioqueue"}],"output":{"name":"bool"}}],[11,"impl_add","","",15,{"inputs":[{"name":"prioqueue"},{"name":"t"}],"output":null}],[11,"impl_extend","","",15,null],[11,"impl_remove","","",15,{"inputs":[{"name":"prioqueue"}],"output":{"name":"t"}}],[11,"impl_forget","","",15,{"inputs":[{"name":"prioqueue"},{"name":"usize"},{"name":"f"}],"output":{"name":"usize"}}],[11,"impl_peek","","",15,{"inputs":[{"name":"prioqueue"}],"output":{"name":"t"}}],[11,"impl_clear","","",15,{"inputs":[{"name":"prioqueue"},{"name":"f"}],"output":null}],[11,"impl_copy","","",15,null],[11,"fmt","","",15,{"inputs":[{"name":"prioqueue"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"queue","main::rust::data::container","",null,null],[3,"Queue","main::rust::data::container::queue","A fixed-size, FIFO/LILO array (queue).",null,null],[11,"write_char","main::rust::data::container::queue::dev::fmt","Writes a `char` into this writer, returning whether the write succeeded.",1,{"inputs":[{"name":"write"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","Glue for usage of the `write!` macro with implementers of this trait.",1,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"impl_construct","main::rust::data::container::queue","",16,null],[11,"impl_len","","",16,{"inputs":[{"name":"queue"}],"output":{"name":"usize"}}],[11,"impl_capacity","","",16,{"inputs":[{"name":"queue"}],"output":{"name":"usize"}}],[11,"impl_is_empty","","",16,{"inputs":[{"name":"queue"}],"output":{"name":"bool"}}],[11,"impl_is_full","","",16,{"inputs":[{"name":"queue"}],"output":{"name":"bool"}}],[11,"impl_add","","",16,{"inputs":[{"name":"queue"},{"name":"t"}],"output":null}],[11,"impl_extend","","",16,null],[11,"impl_remove","","",16,{"inputs":[{"name":"queue"}],"output":{"name":"t"}}],[11,"impl_forget","","",16,{"inputs":[{"name":"queue"},{"name":"usize"},{"name":"f"}],"output":{"name":"usize"}}],[11,"impl_peek","","",16,{"inputs":[{"name":"queue"}],"output":{"name":"t"}}],[11,"impl_clear","","",16,{"inputs":[{"name":"queue"},{"name":"f"}],"output":null}],[11,"impl_copy","","",16,null],[11,"fmt","","",16,{"inputs":[{"name":"queue"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"allocator","main::rust::data","",null,null],[5,"min","main::rust::data::allocator","Compare and return the minimum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"size_of","","Returns the size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"transmute","","Unsafely transforms a value of one type into a value of another type.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[4,"Option","","The `Option` type. See [the module level documentation](index.html) for more.",null,null],[13,"None","","No value",17,null],[13,"Some","","Some value `T`",17,null],[3,"Allocator","","Simple mechanism for allocating objects from a pool.",null,null],[3,"Allocated","","Marker for allocated types. Uses `unsafe_no_drop_flag` to ensure that it's\nthe same size as a pointer.",null,null],[8,"Init","","Implementation required for safe initialization of types.",null,null],[10,"init","","",18,{"inputs":[{"name":"init"}],"output":null}],[8,"Alloc","","Implementation required for all allocatable types.",null,null],[10,"allocator","","Creates an allocator for a type.",19,{"inputs":[{"name":"alloc"}],"output":{"name":"allocator"}}],[6,"Target","","",null,null],[11,"deref","","",20,{"inputs":[{"name":"allocated"}],"output":{"name":"t"}}],[11,"deref_mut","","",20,{"inputs":[{"name":"allocated"}],"output":{"name":"t"}}],[11,"drop","","",20,{"inputs":[{"name":"allocated"}],"output":null}],[11,"fmt","","",20,{"inputs":[{"name":"allocated"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs an allocator from a pool of objects, a place to store pointers\nto objects in the pool, and panic errors for allocate and deallocate.",21,null],[11,"available","","Returns the number of available objects in this allocator.",21,{"inputs":[{"name":"allocator"}],"output":{"name":"usize"}}],[11,"has_available","","Returns the same value as `available() > 0`, but may be faster if the\nimplementation allows it.",21,{"inputs":[{"name":"allocator"}],"output":{"name":"bool"}}],[11,"alloc_uninitialized","","Allocates an object from its allocator.",21,{"inputs":[{"name":"allocator"}],"output":{"name":"allocated"}}],[11,"alloc_unitialized_option","","Opitonally allocates an object from its allocator.",21,{"inputs":[{"name":"allocator"}],"output":{"name":"option"}}],[11,"alloc","","Allocates an object from its allocator.",21,{"inputs":[{"name":"allocator"}],"output":{"name":"allocated"}}],[11,"alloc_option","","Optionally allocates an object from its allocator.",21,{"inputs":[{"name":"allocator"}],"output":{"name":"option"}}],[11,"fmt","","",21,{"inputs":[{"name":"allocator"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"context","main::rust::data","",null,null],[3,"Context32","main::rust::data::context","",null,null],[12,"ss","","",22,null],[12,"gs","","",22,null],[12,"fs","","",22,null],[12,"es","","",22,null],[12,"ds","","",22,null],[12,"edi","","",22,null],[12,"esi","","",22,null],[12,"ebp","","",22,null],[12,"esp","","",22,null],[12,"ebx","","",22,null],[12,"edx","","",22,null],[12,"ecx","","",22,null],[12,"eax","","",22,null],[12,"vector","","",22,null],[12,"code","","",22,null],[12,"eip","","",22,null],[12,"cs","","",22,null],[12,"eflags","","",22,null],[3,"Context64","","",null,null],[12,"ss","","",23,null],[12,"gs","","",23,null],[12,"fs","","",23,null],[12,"es","","",23,null],[12,"ds","","",23,null],[12,"r15","","",23,null],[12,"r14","","",23,null],[12,"r13","","",23,null],[12,"r12","","",23,null],[12,"r11","","",23,null],[12,"r10","","",23,null],[12,"r9","","",23,null],[12,"r8","","",23,null],[12,"rdi","","",23,null],[12,"rsi","","",23,null],[12,"rbp","","",23,null],[12,"rsp","","",23,null],[12,"rbx","","",23,null],[12,"rdx","","",23,null],[12,"rcx","","",23,null],[12,"rax","","",23,null],[12,"vector","","",23,null],[12,"code","","",23,null],[12,"rip","","",23,null],[12,"cs","","",23,null],[12,"rflags","","",23,null],[0,"flags","","FLAGS register constants.",null,null],[17,"DEFAULT","main::rust::data::context::flags","Default value for eflags/rflags register",null,null],[17,"RESERVED","","Bits which are unused (all bits past bit 21)",null,null],[17,"MUST_BE_0","","Bits which must be 0",null,null],[17,"MUST_BE_1","","Bits which must be 1",null,null],[17,"ID","","CPUID instruction enable flag",null,null],[17,"VIP","","Virtual interrupt pending flag",null,null],[17,"VIF","","Virtual interrupt flag",null,null],[17,"AC","","Alignment check flag",null,null],[17,"VM","","Virtual 8086 mode flag",null,null],[17,"RF","","Resume flag",null,null],[17,"NT","","Nested task flag",null,null],[17,"IOPL","","I/O privilege level flag",null,null],[17,"OF","","Overflow flag",null,null],[17,"DF","","Direction flag",null,null],[17,"IF","","Interrupt enable flag",null,null],[17,"TF","","Trap flag",null,null],[17,"SF","","Sign flag",null,null],[17,"ZF","","Zero flag",null,null],[17,"AF","","Adjust flag",null,null],[17,"PF","","Parity flag",null,null],[17,"CF","","Carry flag",null,null],[11,"new","main::rust::data::context","",23,{"inputs":[{"name":"context64"}],"output":{"name":"context64"}}],[11,"new","","",22,{"inputs":[{"name":"context32"}],"output":{"name":"context32"}}],[11,"into","","",23,{"inputs":[{"name":"context64"}],"output":{"name":"context32"}}],[11,"into","","",22,null],[11,"into","","",23,null],[11,"fmt","","",22,{"inputs":[{"name":"context32"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"stack","main::rust::data","",null,null],[3,"Stack32","main::rust::data::stack","32-bit stack.",null,null],[12,"data","","",24,null],[3,"Stack64","","64-bit stack.",null,null],[12,"data","","",25,null],[17,"STACK_SIZE","","Number of registers which can be saved on the stack.",null,null],[11,"allocator","","",24,{"inputs":[{"name":"stack32"}],"output":{"name":"allocator"}}],[11,"allocator","","",25,{"inputs":[{"name":"stack64"}],"output":{"name":"allocator"}}],[0,"pcb","main::rust::data","",null,null],[3,"Process64","main::rust::data::pcb","64-bit process control block.",null,null],[11,"init","","",26,{"inputs":[{"name":"process64"}],"output":null}],[11,"allocator","","",26,{"inputs":[{"name":"process64"}],"output":{"name":"allocator"}}],[0,"consts","main::rust","",null,null],[17,"TARGET_SEGMENT","main::rust::consts","",null,null],[17,"TARGET_ADDRESS","","",null,null],[17,"TARGET_STACK","","",null,null],[17,"GDT_SEGMENT","","",null,null],[17,"GDT_ADDRESS","","",null,null],[17,"GDT_LINEAR","","",null,null],[17,"GDT_CODE","","",null,null],[17,"GDT_DATA","","",null,null],[17,"GDT_STACK","","",null,null],[17,"IDT_SEGMENT","","",null,null],[17,"IDT_ADDRESS","","",null,null],[17,"MMAP_SEGMENT","","",null,null],[17,"MMAP_ADDRESS","","",null,null],[17,"MMAP_EXT_LO","","",null,null],[17,"MMAP_EXT_HI","","",null,null],[17,"MMAP_CFG_LO","","",null,null],[17,"MMAP_CFG_HI","","",null,null],[17,"MMAP_PROGRAMS","","",null,null],[17,"MMAP_SECTORS","","",null,null],[17,"RMTEXT_SEGMENT","","",null,null],[17,"RMTEXT_ADDRESS","","",null,null],[17,"CLOCK_FREQUENCY","","",null,null],[17,"QUANTUM_DEFAULT","","",null,null],[17,"NULL","","",null,null],[17,"N_PROCS","","",null,null],[17,"N_QUEUES","","",null,null],[17,"FD_CONSOLE","","",null,null],[17,"FD_SIO","","",null,null],[17,"INFO_PID","","",null,null],[17,"INFO_PPID","","",null,null],[17,"INFO_STATE","","",null,null],[17,"INFO_WAKEUP","","",null,null],[17,"INFO_PRIO","","",null,null],[17,"INFO_QUANTUM","","",null,null],[17,"INFO_DEF_QUANTUM","","",null,null],[17,"SYSINFO_TIME","","",null,null],[17,"SYSINFO_NUM_PROCS","","",null,null],[17,"SYSINFO_MAX_PROCS","","",null,null],[17,"N_PCBS","","",null,null],[17,"STATE_CODE_MASK","","",null,null],[17,"STATE_FLAG_MASK","","",null,null],[17,"STATE_FREE","","",null,null],[17,"STATE_NEW","","",null,null],[17,"STATE_READY","","",null,null],[17,"STATE_RUNNING","","",null,null],[17,"STATE_SLEEPING","","",null,null],[17,"STATE_BLOCKED","","",null,null],[17,"N_STATES","","",null,null],[17,"PRIO_SYSTEM","","",null,null],[17,"PRIO_USER_HIGH","","",null,null],[17,"PRIO_USER_STD","","",null,null],[17,"PRIO_USER_LOW","","",null,null],[17,"PRIO_DEFAULT","","",null,null],[17,"N_PRIOS","","",null,null],[17,"PRIO_LAST","","",null,null],[17,"PID_INIT","","",null,null],[17,"N_READY","","",null,null],[17,"SIO_TX","","",null,null],[17,"SIO_RX","","",null,null],[17,"SIO_BOTH","","",null,null],[17,"STACK_LWORDS","","",null,null],[17,"N_STACKS","","",null,null],[17,"IDT_PADDR","","",null,null],[17,"SYS_exit","","",null,null],[17,"SYS_spawnp","","",null,null],[17,"SYS_sleep","","",null,null],[17,"SYS_read","","",null,null],[17,"SYS_write","","",null,null],[17,"SYS_get_process_info","","",null,null],[17,"SYS_get_system_info","","",null,null],[17,"N_SYSCALLS","","",null,null],[17,"SYS_bogus","","",null,null],[17,"INT_VEC_SYSCALL","","",null,null],[17,"DEFAULT_EFLAGS","","",null,null],[17,"UA4_COM1_IOADDR","","",null,null],[17,"UA4_COM2_IOADDR","","",null,null],[17,"UA4_COM3_IOADDR","","",null,null],[17,"UA4_COM4_IOADDR","","",null,null],[17,"UA4_PORT","","",null,null],[17,"UA4_RXD","","",null,null],[17,"UA4_RX_DATA","","",null,null],[17,"UA4_TXD","","",null,null],[17,"UA4_TX_DATA","","",null,null],[17,"UA4_IER","","",null,null],[17,"UA4_INT_ENABLE_REG","","",null,null],[17,"UA4_IER_RXHDL_IE","","",null,null],[17,"UA4_IER_RX_INT_ENABLE","","",null,null],[17,"UA4_IER_TXLDL_IE","","",null,null],[17,"UA4_IER_TX_INT_ENABLE","","",null,null],[17,"UA4_IER_LS_IE","","",null,null],[17,"UA4_IER_LINE_STATUS_INT_ENABLE","","",null,null],[17,"UA4_IER_MS_IE","","",null,null],[17,"UA4_IER_MODEM_STATUS_INT_ENABLE","","",null,null],[17,"UA4_EIR","","",null,null],[17,"UA4_EVENT_ID","","",null,null],[17,"UA4_EIR_IPF","","",null,null],[17,"UA4_EIR_INT_PENDING","","",null,null],[17,"UA4_EIR_IPR0","","",null,null],[17,"UA4_EIR_IPR1","","",null,null],[17,"UA4_EIR_PRI","","",null,null],[17,"UA5_EIR_RXFT","","",null,null],[17,"UA5_EIR_RX_FIFO_TIMEOUT","","",null,null],[17,"UA5_EIR_FEN0","","",null,null],[17,"UA5_EIR_FIFO_ENABLED_0","","",null,null],[17,"UA5_EIR_FEN1","","",null,null],[17,"UA5_EIR_FIFO_ENABLED_1","","",null,null],[17,"UA4_EIR_INT_PRI_MASK","","",null,null],[17,"UA4_EIR_NO_INT","","",null,null],[17,"UA4_EIR_NO_INT_PENDING","","",null,null],[17,"UA4_EIR_LINE_STATUS","","",null,null],[17,"UA4_EIR_LINE_STATUS_INT_PENDING","","",null,null],[17,"UA4_EIR_RX_HIGH","","",null,null],[17,"UA4_EIR_RX_INT_PENDING","","",null,null],[17,"UA5_EIR_RX_FIFO_TO","","",null,null],[17,"UA5_EIR_RX_FIFO_TIMEOUT_INT_PENDING","","",null,null],[17,"UA4_EIR_TX_LOW","","",null,null],[17,"UA4_EIR_TX_INT_PENDING","","",null,null],[17,"UA4_EIR_MODEM_STATUS","","",null,null],[17,"UA4_EIR_MODEM_STATUS_INT_PENDING","","",null,null],[17,"UA4_FCR","","",null,null],[17,"UA4_FIFO_CTL","","",null,null],[17,"UA5_FCR_FIFO_RESET","","",null,null],[17,"UA5_FCR_FIFO_EN","","",null,null],[17,"UA5_FCR_FIFO_ENABLED","","",null,null],[17,"UA5_FCR_RXSR","","",null,null],[17,"UA5_FCR_RX_SOFT_RESET","","",null,null],[17,"UA5_FCR_TXSR","","",null,null],[17,"UA5_FCR_TX_SOFT_RESET","","",null,null],[17,"UA5_FCR_TXFTH0","","",null,null],[17,"UA5_FCR_TXFTH1","","",null,null],[17,"UA5_FCR_TXFTH","","",null,null],[17,"UA5_FCR_RXFTH0","","",null,null],[17,"UA5_FCR_RXFTH1","","",null,null],[17,"UA5_FCR_RXFTH","","",null,null],[17,"UA5_FCR_TX_FIFO_1","","",null,null],[17,"UA5_FCR_TX_FIFO_1_CHAR","","",null,null],[17,"UA5_FCR_TX_FIFO_3","","",null,null],[17,"UA5_FCR_TX_FIFO_3_CHAR","","",null,null],[17,"UA5_FCR_TX_FIFO_9","","",null,null],[17,"UA5_FCR_TX_FIFO_9_CHAR","","",null,null],[17,"UA5_FCR_TX_FIFO_13","","",null,null],[17,"UA5_FCR_TX_FIFO_13_CHAR","","",null,null],[17,"UA5_FCR_RX_FIFO_1","","",null,null],[17,"UA5_FCR_RX_FIFO_1_CHAR","","",null,null],[17,"UA5_FCR_RX_FIFO_4","","",null,null],[17,"UA5_FCR_RX_FIFO_4_CHAR","","",null,null],[17,"UA5_FCR_RX_FIFO_8","","",null,null],[17,"UA5_FCR_RX_FIFO_8_CHAR","","",null,null],[17,"UA5_FCR_RX_FIFO_14","","",null,null],[17,"UA5_FCR_RX_FIFO_14_CHAR","","",null,null],[17,"UA4_LCR","","",null,null],[17,"UA4_LINE_CTL","","",null,null],[17,"UA4_LCR_WLS0","","",null,null],[17,"UA4_LCR_WLS1","","",null,null],[17,"UA4_LCR_WLS","","",null,null],[17,"UA4_LCR_STB","","",null,null],[17,"UA4_LCR_STOP_BITS","","",null,null],[17,"UA4_LCR_PEN","","",null,null],[17,"UA4_LCR_PARITY_ENABLE","","",null,null],[17,"UA4_LCR_EPS","","",null,null],[17,"UA4_LCR_STKP","","",null,null],[17,"UA4_LCR_SBRK","","",null,null],[17,"UA4_LCR_SET_BREAK","","",null,null],[17,"UA4_LCR_BKSE","","",null,null],[17,"UA4_LCR_BANK_SELECT_ENABLE","","",null,null],[17,"UA4_LCR_BITS_5","","",null,null],[17,"UA4_LCR_BITS_6","","",null,null],[17,"UA4_LCR_BITS_7","","",null,null],[17,"UA4_LCR_BITS_8","","",null,null],[17,"UA4_LCR_1_STOP_BIT","","",null,null],[17,"UA4_LCR_2_STOP_BIT","","",null,null],[17,"UA4_LCR_NO_PARITY","","",null,null],[17,"UA4_LCR_ODD_PARITY","","",null,null],[17,"UA4_LCR_EVEN_PARITY","","",null,null],[17,"UA4_LCR_PARITY_LOGIC_1","","",null,null],[17,"UA4_LCR_PARITY_LOGIC_0","","",null,null],[17,"UA4_BSR","","",null,null],[17,"UA4_BANK_SELECT","","",null,null],[17,"UA4_BSR_BANK2","","",null,null],[17,"UA4_BSR_BANK3","","",null,null],[17,"UA4_LCR_BANK0","","",null,null],[17,"UA4_LCR_BANK1","","",null,null],[17,"UA4_MCR","","",null,null],[17,"UA4_MODEM_CTL","","",null,null],[17,"UA4_MCR_DTR","","",null,null],[17,"UA4_MCR_DATA_TERMINAL_READY","","",null,null],[17,"UA4_MCR_RTS","","",null,null],[17,"UA4_MCR_READY_TO_SEND","","",null,null],[17,"UA4_MCR_RILP","","",null,null],[17,"UA4_MCR_LOOPBACK_INT_REQ","","",null,null],[17,"UA4_MCR_ISEN","","",null,null],[17,"UA4_MCR_INT_SIGNAL_ENABLE","","",null,null],[17,"UA4_MCR_DCDLP","","",null,null],[17,"UA4_MCR_LOOPBACK_DCD","","",null,null],[17,"UA4_MCR_LOOP","","",null,null],[17,"UA4_MCR_LOOPBACK_ENABLE","","",null,null],[17,"UA4_LSR","","",null,null],[17,"UA4_LINE_STATUS","","",null,null],[17,"UA4_LSR_RXDA","","",null,null],[17,"UA4_LSR_RX_DATA_AVAILABLE","","",null,null],[17,"UA4_LSR_OE","","",null,null],[17,"UA4_LSR_OVERRUN_ERROR","","",null,null],[17,"UA4_LSR_PE","","",null,null],[17,"UA4_LSR_PARITY_ERROR","","",null,null],[17,"UA4_LSR_FE","","",null,null],[17,"UA4_LSR_FRAMING_ERROR","","",null,null],[17,"UA4_LSR_BRK","","",null,null],[17,"UA4_LSR_BREAK_DETECTED","","",null,null],[17,"UA4_LSR_TXRDY","","",null,null],[17,"UA4_LSR_TX_READY","","",null,null],[17,"UA4_LSR_TXEMP","","",null,null],[17,"UA4_LSR_TX_EMPTY","","",null,null],[17,"UA4_LSR_ER_INF","","",null,null],[17,"UA4_LSR_RX_FIFO_ERROR","","",null,null],[17,"UA4_MSR","","",null,null],[17,"UA4_MODEM_STATUS","","",null,null],[17,"UA4_MSR_DCTS","","",null,null],[17,"UA4_MSR_DELTA_CLEAR_TO_SEND","","",null,null],[17,"UA4_MSR_DDSR","","",null,null],[17,"UA4_MSR_DELTA_DATA_SET_READY","","",null,null],[17,"UA4_MSR_TERI","","",null,null],[17,"UA4_MSR_TRAILING_EDGE_RING","","",null,null],[17,"UA4_MSR_DDCD","","",null,null],[17,"UA4_MSR_DELTA_DATA_CARRIER_DETECT","","",null,null],[17,"UA4_MSR_CTS","","",null,null],[17,"UA4_MSR_CLEAR_TO_SEND","","",null,null],[17,"UA4_MSR_DSR","","",null,null],[17,"UA4_MSR_DATA_SET_READY","","",null,null],[17,"UA4_MSR_RI","","",null,null],[17,"UA4_MSR_RING_INDICATE","","",null,null],[17,"UA4_MSR_DCD","","",null,null],[17,"UA4_MSR_DATA_CARRIER_DETECT","","",null,null],[17,"UA4_UA5_SCR","","",null,null],[17,"UA4_UA5_SCRATCH","","",null,null],[17,"UA4_LBGD_L","","",null,null],[17,"UA4_LBGD_H","","",null,null],[17,"BAUD_50","","",null,null],[17,"BAUD_75","","",null,null],[17,"BAUD_110","","",null,null],[17,"BAUD_150","","",null,null],[17,"BAUD_300","","",null,null],[17,"BAUD_600","","",null,null],[17,"BAUD_1200","","",null,null],[17,"BAUD_1800","","",null,null],[17,"BAUD_2000","","",null,null],[17,"BAUD_2400","","",null,null],[17,"BAUD_3600","","",null,null],[17,"BAUD_4800","","",null,null],[17,"BAUD_7200","","",null,null],[17,"BAUD_9600","","",null,null],[17,"BAUD_14400","","",null,null],[17,"BAUD_19200","","",null,null],[17,"BAUD_28800","","",null,null],[17,"BAUD_38400","","",null,null],[17,"BAUD_57600","","",null,null],[17,"BAUD_115200","","",null,null],[17,"DELAY_LONG","","",null,null],[17,"DELAY_STD","","",null,null],[17,"DELAY_ALT","","",null,null],[17,"VIDEO_BASE_ADDR","","",null,null],[17,"SEG_PRESENT","","",null,null],[17,"SEG_PL_0","","",null,null],[17,"SEG_PL_1","","",null,null],[17,"SEG_PL_2","","",null,null],[17,"SEG_PL_3","","",null,null],[17,"SEG_SYSTEM","","",null,null],[17,"SEG_NON_SYSTEM","","",null,null],[17,"SEG_32BIT","","",null,null],[17,"DESC_IGATE","","",null,null],[17,"N_EXCEPTIONS","","",null,null],[17,"EFLAGS_RSVD","","",null,null],[17,"EFLAGS_MB0","","",null,null],[17,"EFLAGS_MB1","","",null,null],[17,"EFLAGS_ID","","",null,null],[17,"EFLAGS_VIP","","",null,null],[17,"EFLAGS_VIF","","",null,null],[17,"EFLAGS_AC","","",null,null],[17,"EFLAGS_VM","","",null,null],[17,"EFLAGS_RF","","",null,null],[17,"EFLAGS_NT","","",null,null],[17,"EFLAGS_IOPL","","",null,null],[17,"EFLAGS_OF","","",null,null],[17,"EFLAGS_DF","","",null,null],[17,"EFLAGS_IF","","",null,null],[17,"EFLAGS_TF","","",null,null],[17,"EFLAGS_SF","","",null,null],[17,"EFLAGS_ZF","","",null,null],[17,"EFLAGS_AF","","",null,null],[17,"EFLAGS_PF","","",null,null],[17,"EFLAGS_CF","","",null,null],[17,"CR0_RSVD","","",null,null],[17,"CR0_PG","","",null,null],[17,"CR0_CD","","",null,null],[17,"CR0_NW","","",null,null],[17,"CR0_AM","","",null,null],[17,"CR0_WP","","",null,null],[17,"CR0_NE","","",null,null],[17,"CR0_ET","","",null,null],[17,"CR0_TS","","",null,null],[17,"CR0_EM","","",null,null],[17,"CR0_MP","","",null,null],[17,"CR0_PE","","",null,null],[17,"CR1_RSVD","","",null,null],[17,"CR2_RSVD","","",null,null],[17,"CR2_PF_LIN_ADDR","","",null,null],[17,"CR3_RSVD","","",null,null],[17,"CR3_PD_BASE","","",null,null],[17,"CR3_PCD","","",null,null],[17,"CR3_PWT","","",null,null],[17,"CR4_RSVD","","",null,null],[17,"CR4_OSXMMEXCPT","","",null,null],[17,"CR4_OSFXSR","","",null,null],[17,"CR4_PCE","","",null,null],[17,"CR4_PGE","","",null,null],[17,"CR4_MCE","","",null,null],[17,"CR4_PAE","","",null,null],[17,"CR4_PSE","","",null,null],[17,"CR4_DE","","",null,null],[17,"CR4_TSD","","",null,null],[17,"CR4_PVI","","",null,null],[17,"CR4_VME","","",null,null],[17,"SEG_SEL_IX","","",null,null],[17,"SEG_SEL_TI","","",null,null],[17,"SEG_SEL_RPL","","",null,null],[17,"SEG_ACCESS_TYPE_MASK","","",null,null],[17,"SEG_ACCESS_S_BIT","","",null,null],[17,"SEG_ACCESS_DPL_MASK","","",null,null],[17,"SEG_ACCESS_P_BIT","","",null,null],[17,"SEG_SIZE_LIM_19_16","","",null,null],[17,"SEG_SIZE_AVL_BIT","","",null,null],[17,"SEG_SIZE_D_B_BIT","","",null,null],[17,"SEG_SIZE_G_BIT","","",null,null],[17,"SEG_SYS_16BIT_TSS_AVAIL","","",null,null],[17,"SEG_SYS_LDT","","",null,null],[17,"SEG_SYS_16BIT_TSS_BUSY","","",null,null],[17,"SEG_SYS_16BIT_CALL_GATE","","",null,null],[17,"SEG_SYS_TASK_GATE","","",null,null],[17,"SEG_SYS_16BIT_INT_GATE","","",null,null],[17,"SEG_SYS_16BIT_TRAP_GATE","","",null,null],[17,"SEG_SYS_32BIT_TSS_AVAIL","","",null,null],[17,"SEG_SYS_32BIT_TSS_BUSY","","",null,null],[17,"SEG_SYS_32BIT_CALL_GATE","","",null,null],[17,"SEG_SYS_32BIT_INT_GATE","","",null,null],[17,"SEG_SYS_32BIT_TRAP_GATE","","",null,null],[17,"IDT_PRESENT","","",null,null],[17,"IDT_DPL_MASK","","",null,null],[17,"IDT_GATE_TYPE","","",null,null],[17,"INT_VEC_DIVIDE_ERROR","","",null,null],[17,"INT_VEC_DEBUG_EXCEPTION","","",null,null],[17,"INT_VEC_NMI_INTERRUPT","","",null,null],[17,"INT_VEC_BREAKPOINT","","",null,null],[17,"INT_VEC_INTO_DETECTED_OVERFLOW","","",null,null],[17,"INT_VEC_BOUND_RANGE_EXCEEDED","","",null,null],[17,"INT_VEC_INVALID_OPCODE","","",null,null],[17,"INT_VEC_DEVICE_NOT_AVAILABLE","","",null,null],[17,"INT_VEC_DOUBLE_EXCEPTION","","",null,null],[17,"INT_VEC_COPROCESSOR_OVERRUN","","",null,null],[17,"INT_VEC_INVALID_TSS","","",null,null],[17,"INT_VEC_SEGMENT_NOT_PRESENT","","",null,null],[17,"INT_VEC_STACK_FAULT","","",null,null],[17,"INT_VEC_GENERAL_PROTECTION","","",null,null],[17,"INT_VEC_PAGE_FAULT","","",null,null],[17,"INT_VEC_COPROCESSOR_ERROR","","",null,null],[17,"INT_VEC_ALIGNMENT_CHECK","","",null,null],[17,"INT_VEC_MACHINE_CHECK","","",null,null],[17,"INT_VEC_SIMD_FP_EXCEPTION","","",null,null],[17,"INT_VEC_TIMER","","",null,null],[17,"INT_VEC_KEYBOARD","","",null,null],[17,"INT_VEC_SERIAL_PORT_2","","",null,null],[17,"INT_VEC_SERIAL_PORT_1","","",null,null],[17,"INT_VEC_PARALLEL_PORT","","",null,null],[17,"INT_VEC_FLOPPY_DISK","","",null,null],[17,"INT_VEC_MYSTERY","","",null,null],[17,"INT_VEC_MOUSE","","",null,null],[17,"TIMER_DEFAULT_TICKS_PER_SECOND","","",null,null],[17,"TIMER_DEFAULT_MS_PER_TICK","","",null,null],[17,"TIMER_FREQUENCY","","",null,null],[17,"TIMER_BASE_PORT","","",null,null],[17,"TIMER_0_PORT","","",null,null],[17,"TIMER_1_PORT","","",null,null],[17,"TIMER_2_PORT","","",null,null],[17,"TIMER_CONTROL_PORT","","",null,null],[17,"TIMER_USE_DECIMAL","","",null,null],[17,"TIMER_USE_BCD","","",null,null],[17,"TIMER_MODE_0","","",null,null],[17,"TIMER_MODE_1","","",null,null],[17,"TIMER_MODE_2","","",null,null],[17,"TIMER_MODE_3","","",null,null],[17,"TIMER_MODE_4","","",null,null],[17,"TIMER_MODE_5","","",null,null],[17,"TIMER_0_SELECT","","",null,null],[17,"TIMER_0_LOAD","","",null,null],[17,"TIMER_0_NDIV","","",null,null],[17,"TIMER_0_SQUARE","","",null,null],[17,"TIMER_0_ENDSIGNAL","","",null,null],[17,"TIMER_1_SELECT","","",null,null],[17,"TIMER_1_READ","","",null,null],[17,"TIMER_1_RATE","","",null,null],[17,"TIMER_2_SELECT","","",null,null],[17,"TIMER_2_READ","","",null,null],[17,"TIMER_2_RATE","","",null,null],[17,"TIMER_READBACK","","",null,null],[17,"TIMER_RB_NOT_COUNT","","",null,null],[17,"TIMER_RB_NOT_STATUS","","",null,null],[17,"TIMER_RB_CHAN_2","","",null,null],[17,"TIMER_RB_CHAN_1","","",null,null],[17,"TIMER_RB_CHAN_0","","",null,null],[17,"TIMER_RB_ACCESS_MASK","","",null,null],[17,"TIMER_RB_OP_MASK","","",null,null],[17,"TIMER_RB_BCD_MASK","","",null,null],[17,"PIC_NEEDICW4","","",null,null],[17,"PIC_ICW1BASE","","",null,null],[17,"PIC_LTIM","","",null,null],[17,"PIC_86MODE","","",null,null],[17,"PIC_AUTOEOI","","",null,null],[17,"PIC_SLAVEBUF","","",null,null],[17,"PIC_MASTERBUF","","",null,null],[17,"PIC_SPFMODE","","",null,null],[17,"PIC_READISR","","",null,null],[17,"PIC_READIRR","","",null,null],[17,"PIC_EOI","","",null,null],[17,"PIC_SEOI","","",null,null],[17,"PIC_SEOI_LVL7","","",null,null],[17,"NPIC","","",null,null],[17,"PIC_MASTER_CMD_PORT","","",null,null],[17,"PIC_MASTER_IMR_PORT","","",null,null],[17,"PIC_SLAVE_CMD_PORT","","",null,null],[17,"PIC_SLAVE_IMR_PORT","","",null,null],[17,"PIC_MASTER_SLAVE_LINE","","",null,null],[17,"PIC_SLAVE_ID","","",null,null],[17,"PIC_BUFFERED","","",null,null],[0,"syscall","main::rust","",null,null],[5,"default_exit","main::rust::syscall","",null,{"inputs":[],"output":null}],[6,"Prio","main","",null,null],[11,"priority","main::rust::data::allocator","",20,{"inputs":[{"name":"allocated"}],"output":{"name":"u8"}}],[14,"container_debug!","main","Implements Debug for a container, displaying the contents of the container\nin a DebugList. Called as `container_debug(Type; Constraint, ...)` or as\n`container_debug(Type; )`.",null,null],[14,"container_debug!","","Implements Debug for a container, displaying the contents of the container\nin a DebugList. Called as `container_debug(Type; Constraint, ...)` or as\n`container_debug(Type; )`.",null,null],[14,"container_debug!","","Implements Debug for a container, displaying the contents of the container\nin a DebugList. Called as `container_debug(Type; Constraint, ...)` or as\n`container_debug(Type; )`.",null,null],[14,"container_debug!","","Implements Debug for a container, displaying the contents of the container\nin a DebugList. Called as `container_debug(Type; Constraint, ...)` or as\n`container_debug(Type; )`.",null,null],[14,"impl_alloc!","","Easy way to implement Alloc.",null,null]],"paths":[[8,"SliceExt2"],[8,"Write"],[8,"Debug"],[8,"Display"],[8,"Octal"],[8,"Binary"],[8,"LowerHex"],[8,"UpperHex"],[8,"Pointer"],[8,"LowerExp"],[8,"UpperExp"],[8,"ContainerImpl"],[8,"Container"],[3,"Vec"],[8,"Priority"],[3,"PrioQueue"],[3,"Queue"],[4,"Option"],[8,"Init"],[8,"Alloc"],[3,"Allocated"],[3,"Allocator"],[3,"Context32"],[3,"Context64"],[3,"Stack32"],[3,"Stack64"],[3,"Process64"]]};
initSearch(searchIndex);
